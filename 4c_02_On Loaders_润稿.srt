1
00:00:00,580 --> 00:00:04,860
Loaders为我们提供了一个可异步加载数据的框架
Loaders provide a framework to perform asynchronous loading of data.

2
00:00:04,860 --> 00:00:08,960
它们通过一个唯一ID注册到一个LoaderManager上
They are registered by ID with a loader manager, which allows them to live

3
00:00:08,960 --> 00:00:13,610
它可让其所管理的Loader的生命周期长于Loader所关联的activity或fragment
beyond the life cycle of the activity or fragment they are associated with.

4
00:00:13,610 --> 00:00:17,920
除了可以异步加载数据之外  Loader还会监视数据源的一举一动
In addition to loading data, loaders include mechanisms to monitor the source

5
00:00:17,920 --> 00:00:21,400
并在内容改变时发送新的结果
of their data, and deliver new results when the contents change.

6
00:00:23,180 --> 00:00:27,050
到目前为止我们已经用过AsyncTask从网络和Sunshine中
Up till now, we've used AsyncTask to load data from the internet and

7
00:00:27,050 --> 00:00:28,420
获取数据
Sunshine.

8
00:00:28,420 --> 00:00:32,650
通常的做法是在onCreate方法中创建AsyncTask的实例
We typically create our AsyncTask in the onCreate method of our activity.

9
00:00:32,650 --> 00:00:35,905
它会新开启一个后台线程
It starts a thread which begins a background task.

10
00:00:35,905 --> 00:00:37,325
如果旋转设备屏幕
If we rotate the device, or

11
00:00:37,325 --> 00:00:40,905
或者其他事件触发activity重启时
do something else that requires the activity to be restarted,

12
00:00:40,905 --> 00:00:43,995
就会有另外一个新的AsyncTask在后台执行操作
we'll create another AsyncTask to do the background operation.

13
00:00:45,075 --> 00:00:47,855
如果要同时
We'll create extra network usage, or

14
00:00:47,855 --> 00:00:51,060
从网络和文件中读取数据
file system usage as both threads run in parallel.

15
00:00:51,060 --> 00:00:55,112
这会花挺长的一段时间才能让用户看到加载完成后的效果
And, it'll take a longer time for the user to see the result of the load.

16
00:00:55,112 --> 00:00:59,990
AsyncTaskLoader实现了和AsyncTask同样的功能
The AsyncTask Loader implements the same functionality as Async Task, but

17
00:00:59,990 --> 00:01:02,610
不过由于AsyncTaskLoader继承自loader  其生命周期与AsyncTask有所不同
because it's a loader, it's lifecycle is different.

18
00:01:02,610 --> 00:01:06,510
改用AsyncTaskLoader  当旋转设备时
With an Async Task Loader, once we rotate the device,

19
00:01:06,510 --> 00:01:09,560
LoaderManager会确保让原有的Loader在
the loader manager will make sure that the old loader is connected to

20
00:01:09,560 --> 00:01:12,518
AsyncTaskLoader重新加载之后还与其保持联系
the Async Task Loader equivalent of on post execute.

21
00:01:12,518 --> 00:01:14,960
看一下onLoadFinished方法
The onLoadFinished function.

22
00:01:14,960 --> 00:01:19,430
Loader所在线程会在loadInBackground中持续运行
The loader thread keeps running in the loadInBackground function, and

23
00:01:19,430 --> 00:01:24,100
而一旦它完成了这个activity就会通过onLoadFinished方法得到通知
once it finishes the activity gets notified through onLoadFinished.

24
00:01:24,100 --> 00:01:27,250
CursorLoader类是从AsyncTaskLoader类是衍生出来的
CursorLoader is derived from Async Task Loader but

25
00:01:27,250 --> 00:01:29,620
而且还有一些额外的优化
has an additional optimization.

26
00:01:29,620 --> 00:01:31,870
在activity重新创建之前  如果游标已经加载过数据
If the cursor has already finished loading and

27
00:01:31,870 --> 00:01:35,890
并且还存在于后台线程之中
load in background before the activity restarts,

28
00:01:35,890 --> 00:01:39,080
CursorLoader就会在初始化时识别出该游标的数据
the CursorLoader recognizes this during the loader initialization.

29
00:01:39,080 --> 00:01:42,655
通过onLoadFinished方法  游标的内容会立刻被显示出来
And the cursor is immediately delivered to the UI through onLoadFinished

